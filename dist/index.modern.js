import e from"chroma-js";import o from"tailwindcss/colors";function n(){return n=Object.assign?Object.assign.bind():function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},n.apply(this,arguments)}function t(e){return Object.keys(e)}function r(e){return Object.entries(e)}const l=["rgb","lab","lch","lrgb","hcl","num","hcg","oklch","hsi","hsl","hsv","oklab"],i={lerpEnds:!0,interval:25,mode:"lrgb"},s=n({includeBase:!0,includeLegacy:!1},i),a=(e,o,n)=>e&&Object.prototype.hasOwnProperty.call(e,o)&&!n(e[o]),c=e=>{throw new Error(e)},u=e=>!(null==e||"object"!=typeof e||Array.isArray(e)||"[object Object]"!==e.toString()||!t(e).every(e=>!isNaN(+e))),p=(o,t={})=>{a(t,"lerpEnds",e=>"boolean"==typeof e)&&c("tailwind-lerp-colors option `lerpEnds` must be a boolean."),a(t,"interval",e=>Number.isInteger(e)&&"number"==typeof e&&e>0)&&c("tailwind-lerp-colors option `interval` must be a positive integer greater than 0."),a(t,"mode",e=>"string"==typeof e&&l.includes(e))&&c(`tailwind-lerp-colors option \`mode\` must be one of the following values: ${l.join(", ")}.`),u(o)||c("tailwind-lerp-colors object `shades` must be an object with numeric keys.\n\nvalue used: "+JSON.stringify(o,null,2));const{lerpEnds:s,interval:p,mode:b}=n({},i,null!=t?t:{}),d=([e],[o])=>e-o,f=r(o).map(([e,o])=>[Number(e),o]).sort(d);s&&(f.unshift([0,"#ffffff"]),f.push([1e3,"#000000"]));const m=[...f];for(let o=0;o<f.length-1;o++){const[n,t]=f[o],[r,l]=f[o+1],i=(r-n)/p-1;if(i<=0||!Number.isInteger(i))continue;const s=e.scale([t,l]).mode(b),a=e=>s(e).hex();for(let e=1;e<=i;e++)m.push([n+p*e,a(e/(i+1))])}return m.sort(d),Object.fromEntries(m)},b=(e={},l={})=>{a(l,"includeBase",e=>"boolean"==typeof e)&&c("tailwind-lerp-colors option `includeBase` must be a boolean."),a(l,"includeLegacy",e=>"boolean"==typeof e)&&c("tailwind-lerp-colors option `includeLegacy` must be a boolean.");const i=["lightBlue","warmGray","trueGray","coolGray","blueGray"],{includeBase:b,includeLegacy:d,lerpEnds:f,interval:m,mode:y}=n({},s,l),h={};if(b){const e=t(o);for(const n of e)i.includes(n)&&!d||(h[n]=o[n])}const g=r(n({},h,e)),j={};for(const[e,o]of g)j[`${e}`]=o,u(o)&&(j[e]=p(o,{lerpEnds:f,interval:m,mode:y}));return j};export{p as lerpColor,b as lerpColors,l as validColorModes};
//# sourceMappingURL=index.modern.js.map
